// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  phoneNumber      String?        @map("phone_number")
  passwordHash     String         @default("") @map("password_hash") @db.VarChar(255)
  verificationCode String?        @map("verification_code") @db.VarChar(5)
  providerId       String?        @unique @map("provider_id") @db.VarChar(255)
  providerType     String?        @map("provider_type") @db.VarChar(255)
  profile          Profile?
  following        UserFollower[] @relation("UserFollowsUser")
  followers        UserFollower[] @relation("UserFollowsTarget")
  videos           Video[]
  comments         Comment[]
  likes            Like[]

  @@map("user")
}

model Profile {
  id          String    @id @default(uuid())
  firstName   String    @map("first_name") @db.VarChar(20)
  lastName    String    @map("last_name") @db.VarChar(20)
  bio         String?   @db.VarChar(255)
  userImage   String?   @map("user_image") @db.VarChar(255)
  gender      Gender?
  dateOfBirth DateTime? @map("data_of_birth")
  location    String?   @db.VarChar(255)
  createAt    DateTime  @default(now()) @map("create_at")
  updateAt    DateTime  @updatedAt @map("update_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique

  @@map("profile")
}

model UserFollower {
  user      User     @relation("UserFollowsUser", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  target    User     @relation("UserFollowsTarget", fields: [targetId], references: [id], onDelete: Cascade)
  targetId  String
  createdAt DateTime @default(now())

  @@id([userId, targetId])
  @@map("user_follows")
}

model Video {
  id           String    @id @default(uuid())
  video        String    @unique @db.VarChar(255)
  caption      String?   @db.Text
  tags         String?   @db.VarChar(255)
  location     String    @db.VarChar(255)
  private      Boolean   @default(false)
  views        Int       @default(0)
  createAt     DateTime  @default(now()) @map("create_at")
  updateAt     DateTime  @updatedAt @map("update_at")
  createUserId String
  createUser   User      @relation(fields: [createUserId], references: [id], onDelete: Cascade)
  comments     Comment[]
  likes        Like[]

  @@map("video")
}

model Comment {
  id       String   @id @default(uuid())
  text     String   @db.Text
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @updatedAt @map("update_at")
  authorId String
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  videoId  String
  video    Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("comment")
}

model Like {
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId String
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([userId, videoId])
  @@map("like")
}

enum Gender {
  Male
  Female
}
